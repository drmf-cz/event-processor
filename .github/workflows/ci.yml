name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Install golangci-lint
        run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2

      - name: Lint
        run: golangci-lint run --timeout=5m

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Run Tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage.txt

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Build
        run: go build -v ./...

  e2e-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: docker-compose up -d

      - name: Wait for app to be ready
        run: |
          timeout 30s bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:8080/health)" != "200" ]]; do sleep 5; done' || false

      - name: Run E2E Tests with Profiling
        run: |
          # Run load test and collect CPU profile
          go test -v ./e2e/... -cpuprofile=cpu.prof

          # Collect memory profile
          curl -o mem.prof http://localhost:8080/debug/pprof/heap

          # Collect goroutine profile
          curl -o goroutine.prof http://localhost:8080/debug/pprof/goroutine

      - name: Analyze Profiles
        run: |
          # Analyze CPU profile
          go tool pprof -text cpu.prof > cpu_analysis.txt
          
          # Analyze memory profile
          go tool pprof -text mem.prof > mem_analysis.txt
          
          # Analyze goroutine profile
          go tool pprof -text goroutine.prof > goroutine_analysis.txt

      - name: Upload Profile Analysis
        uses: actions/upload-artifact@v3
        with:
          name: profile-analysis
          path: |
            cpu_analysis.txt
            mem_analysis.txt
            goroutine_analysis.txt

      - name: Cleanup
        if: always()
        run: docker-compose down 