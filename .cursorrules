# Cursor Rules for Go Project

## Code Structure
- Keep modules under 250 lines of code
- Follow KISS (Keep It Simple, Stupid) and DRY (Don't Repeat Yourself) principles
- Use meaningful package names that reflect their purpose
- One package per directory

## Testing
- Maintain 80%+ test coverage
- Write table-driven tests
- Use testify for assertions
- Mock external dependencies
- Test error cases explicitly

## Code Quality
- Run golang-ci lint with strict settings
- Zero tolerance for lint warnings
- Use gofumpt for consistent formatting
- Document all exported functions and types
- Add examples in doc comments for complex functions

## Error Handling
- Custom errors for domain-specific cases
- No naked returns
- Always handle errors explicitly
- Use error wrapping with context

## Dependencies
- Vendor all dependencies
- Pin dependency versions
- Regular security audits with `go mod verify`
- Minimize external dependencies

## Git Practices
- Atomic commits
- Conventional commit messages
- Branch per feature
- Rebase before merge

## Performance
- Benchmark critical paths
- Profile before optimization
- Use sync.Pool for frequent allocations
- Consider memory allocations

## Code Review
- Two approvals required
- No direct pushes to main
- Address all review comments
- Use pull request templates

## Documentation
- README.md in each package
- Architecture decision records (ADR)
- API documentation
- Clear examples in docs 

## Linting with golangci-lint
- Run `golangci-lint run` before each commit
- All linter warnings must be fixed before merging
- Configuration in `.golangci.yml`:
  - Enable all linters except deprecated ones
  - Max line length: 140 characters
  - Max function length: 100 lines
  - Max cyclomatic complexity: 15
  - Enforce consistent import grouping
  - Check for shadowed variables
  - Detect code duplications
  - Enforce consistent error handling
  - Check for common mistakes and code style
- Use `golangci-lint run --fix` to auto-fix issues when possible
- Document any linter disabling with clear comments
- Regular linter configuration updates with team consensus 

## NATS JWT Authorization
- NATS uses JWTs for secure authentication and authorization.
- Operators manage accounts and users, each with unique JWTs.
- JWTs are signed, ensuring authenticity and integrity.
- Clients authenticate using credentials files containing JWTs.
- The server verifies JWTs against the operator's public key.
- Permissions are defined per account, controlling publish/subscribe access.
- JWTs can be revoked or updated without server restarts.
- Use `nsc` to manage operators, accounts, and users.
- Store JWTs securely and avoid hardcoding them in applications.
- JWTs provide fine-grained access control and auditability. 